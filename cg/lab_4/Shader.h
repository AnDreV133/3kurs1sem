//
// Created by dmitr on 13.11.2024.
//

#ifndef LAB_4_SHADER_H
#define LAB_4_SHADER_H

class TriangleShader
{
public:
    VertexData vertices[3]; // ?????? ?? ???? ?????? ????????????

    // ???????????, ???????????????? ??????? ????????????
    TriangleShader(VertexData D0, VertexData D1, VertexData D2) : vertices{ D0, D1, D2 } {};

    // ????? ??? ?????????? ????? ??????? ?? ?????? ??? ?????????
    COLOR main(VertexData data)
    {
        float x = data.x; // ???????? ?????????? x
        float y = data.y; // ???????? ?????????? y
        float z = data.z; // ???????? ?????????? z

        // ????????? ??????? ?? ??????? ??? ???????? ??????? ????????
        float a = fmod(x + 1, 0.04f);
        float b = fmod(y + 1, 0.04f);

        // ???? ??????? ????????? ?? ???????, ?????????? ???? ????, ????? ??????
        if ((a > 0.02f) == (b > 0.02f))
            return COLOR(200, 200, 200); // ??????? ????
        else
            return COLOR(20, 20, 0); // ?????? ????
    }

    // ????? ??? ????????? ?????? ? ??????? ?? ?????? ???????????????? ?????????
    VertexData getPixelData(double h0, double h1, double h2)
    {
        // ????????? ?????????? ??????? ? ?????? ???????????????? ?????????
        float x = h0 * vertices[0].x + h1 * vertices[1].x + h2 * vertices[2].x;
        float y = h0 * vertices[0].y + h1 * vertices[1].y + h2 * vertices[2].y;
        float z = h0 * vertices[0].z + h1 * vertices[1].z + h2 * vertices[2].z;

        return { x, y, z }; // ?????????? ??????????? ?????????? ??? ?????? VertexData
    }
};

#endif //LAB_4_SHADER_H
